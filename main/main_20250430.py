import config
import boto3
import time
import subprocess
import paramiko
from gpiozero import Button, LED, Device
from gpiozero.pins.lgpio import LGPIOFactory
import socket
import requests
import sys
import os
import threading
import traceback
import atexit
from enum import Enum

# ======= „É¶„Éº„Ç∂„ÉºË®≠ÂÆö =======
INSTANCE_ID = config.INSTANCE_ID
REGION = config.AWS_REGION
VOICEVOX_PORT = config.VOICEVOX_PORT
EC2_HOST = config.EC2_HOST
ASSISTANT_SCRIPT = 'assistant.py'
SSH_KEY_PATH = config.SSH_KEY_PATH
# ============================

# „Éè„Éº„Éâ„Ç¶„Çß„Ç¢Ë®≠ÂÆö
Device.pin_factory = LGPIOFactory()

button = Button(17, pull_up=True, bounce_time=0.1)
led = LED(18)

def cleanup_gpio():
    print("üßπ GPIOËß£Êîæ‰∏≠...")
    try:
        button.when_pressed = None
        led.close()
        button.close()
        print("üîì gpiozero „Å´„Çà„Çã GPIO Ëß£ÊîæOK")
    except Exception as e:
        print("‚ö† GPIOËß£Êîæ„Ç®„É©„Éº:", e)

atexit.register(cleanup_gpio)

# AWS „ÇØ„É©„Ç§„Ç¢„É≥„Éà
ec2 = boto3.client('ec2', region_name=REGION)

class Mode(Enum):
    IDLE = config.SPEAKER_ID
    STARTING = 2
    TALKING = 3
    SHUTTING_DOWN = 4

state = {
    "mode": Mode.IDLE,
    "host": EC2_HOST,
    "assistant_process": None,
}

def wait_for_ssh_ready(host, port=22, timeout=60):
    print(f"SSH„Éù„Éº„Éà {host}:{port} „ÇíÂæÖÊ©ü‰∏≠...")
    start_time = time.time()
    while time.time() - start_time < timeout:
        try:
            with socket.create_connection((host, port), timeout=5):
                print("SSH„Éù„Éº„Éà„Å´Êé•Á∂öÊàêÂäüÔºÅ")
                return True
        except:
            time.sleep(2)
    print("‚è∞ SSHÊé•Á∂ö„Çø„Ç§„É†„Ç¢„Ç¶„Éà")
    return False

def wait_until_ec2_stopped(instance_id):
    print("‚è≥ EC2„ÅÆÂÅúÊ≠¢ÂÆå‰∫Ü„ÇíÂæÖ„Å£„Å¶„ÅÑ„Åæ„Åô...")
    while True:
        response = ec2.describe_instances(InstanceIds=[instance_id])
        instance_state = response["Reservations"][0]["Instances"][0]["State"]["Name"]
        print(f"üì¶ ÁèæÂú®„ÅÆÁä∂ÊÖã: {instance_state}")
        if instance_state == "stopped":
            print("‚úÖÂÅúÊ≠¢ÂÆå‰∫Ü")
            break
        elif instance_state == "terminated":
            raise RuntimeError("‚ùå „Ç§„É≥„Çπ„Çø„É≥„Çπ„Åå terminate „Åï„Çå„Å¶„ÅÑ„Åæ„Åô„ÄÇ")
        time.sleep(5)

def start_ec2():
    print("‚ñ∂ EC2„Ç§„É≥„Çπ„Çø„É≥„Çπ„ÇíËµ∑Âãï„Åó„Åæ„Åô...")
    response = ec2.describe_instances(InstanceIds=[INSTANCE_ID])
    instance = response["Reservations"][0]["Instances"][0]
    current_state = instance["State"]["Name"]
    print(f"üîé EC2„ÅÆÁèæÂú®„ÅÆÁä∂ÊÖã: {current_state}")

    if current_state == "running":
        print("‚ö† „Åô„Åß„Å´Ëµ∑Âãï‰∏≠„Åß„Åô„ÄÇ")
    elif current_state == "stopped":
        ec2.start_instances(InstanceIds=[INSTANCE_ID])
    elif current_state == "stopping":
        wait_until_ec2_stopped(INSTANCE_ID)
        ec2.start_instances(InstanceIds=[INSTANCE_ID])
    else:
        raise RuntimeError(f"‚ö† Ëµ∑Âãï„Åß„Åç„Å™„ÅÑÁä∂ÊÖã: {current_state}")

    print("‚è≥ EC2„ÅÆËµ∑Âãï„ÇíÂæÖÊ©ü„Åó„Åæ„Åô...")
    waiter = ec2.get_waiter("instance_running")
    waiter.wait(InstanceIds=[INSTANCE_ID])
    print("‚úÖ EC2Ëµ∑ÂãïÂÆå‰∫ÜÔºÅ")

    if wait_for_ssh_ready(EC2_HOST):
        return EC2_HOST
    else:
        print("‚ùå SSHÊé•Á∂ö„Åß„Åç„Åæ„Åõ„Çì„Åß„Åó„Åü")
        return None

# ‚≠ê VoiceVox „ÅÆËµ∑ÂãïÁ¢∫Ë™ç„Å†„Åë„ÅØÂøÖË¶Å
def wait_for_voicevox(host, port=VOICEVOX_PORT, timeout=60):
    print(f"üîÑ VoiceVox Ëµ∑ÂãïÁ¢∫Ë™ç‰∏≠: http://{host}:{port}")
    start_time = time.time()

    while time.time() - start_time < timeout:
        try:
            with socket.create_connection((host, port), timeout=3):
                try:
                    response = requests.get(f"http://{host}:{port}", timeout=3)
                    if response.status_code == 200:
                        speakers_response = requests.get(f"http://{host}:{port}/speakers", timeout=3)
                        if speakers_response.status_code == 200:
                            print("‚úÖ VoiceVox /speakers API ÂøúÁ≠î„ÅÇ„Çä ‚Üí ÂÆåÂÖ®Ëµ∑ÂãïÁ¢∫Ë™çÔºÅ")
                            return True
                        else:
                            print(f"‚è≥ /speakersÂøúÁ≠îÁï∞Â∏∏: {speakers_response.status_code}")
                    else:
                        print(f"‚è≥ HTTPÂøúÁ≠î„Ç≥„Éº„ÉâÁï∞Â∏∏: {response.status_code}")
                except requests.exceptions.RequestException as e:
                    print(f"‚è≥ HTTPÂøúÁ≠îÂæÖ„Å°‰∏≠‚Ä¶ {e}")
        except Exception as e:
            print(f"‚è≥ „Éù„Éº„ÉàÊé•Á∂öÂæÖ„Å°‰∏≠‚Ä¶ {e}")
        time.sleep(2)

    print("‚ùå VoiceVox Ëµ∑Âãï„Çø„Ç§„É†„Ç¢„Ç¶„Éà")
    return False


def stop_voicevox(host):
    try:
        ssh = paramiko.SSHClient()
        ssh.set_missing_host_key_policy(paramiko.AutoAddPolicy())
        ssh.connect(host, username='ubuntu', key_filename=SSH_KEY_PATH)
        ssh.exec_command("docker stop voicevox")
        ssh.close()
    except Exception as e:
        print("‚ö†VoicevoxÂÅúÊ≠¢Â§±Êïó:", e)

def stop_ec2():
    try:
        ec2.stop_instances(InstanceIds=[INSTANCE_ID])
        print("‚úÖEC2„Ç§„É≥„Çπ„Çø„É≥„Çπ„ÇíÂÅúÊ≠¢ÊåáÁ§∫ÂÆå‰∫Ü")
    except Exception as e:
        print("‚ö†EC2ÂÅúÊ≠¢„Ç®„É©„Éº:", e)

def monitor_assistant():
    proc = state["assistant_process"]
    if proc is None:
        return
    try:
        proc.wait(timeout=900)  # ‚è± 15ÂàÜÈñì„ÅÆ„Çø„Ç§„É†„Ç¢„Ç¶„Éà
        print("üõë assistant.py „ÅåÊ≠£Â∏∏ÁµÇ‰∫Ü„Åó„Åæ„Åó„ÅüÔºà„Åæ„Åü„ÅØ„Çø„Ç§„É†„Ç¢„Ç¶„ÉàÔºâ")
    except subprocess.TimeoutExpired:
        print("‚è∞ assistant.py „Åå„Çø„Ç§„É†„Ç¢„Ç¶„Éà„Åó„Åæ„Åó„Åü ‚Üí Âº∑Âà∂„Ç∑„É£„ÉÉ„Éà„ÉÄ„Ç¶„É≥„Åó„Åæ„Åô")
        proc.kill()
    finally:
        handle_shutdown()


def start_assistant(host):
    print("üß† assistant.py „ÇíËµ∑Âãï„Åó„Åæ„Åô")
    led.on()
    try:
        proc = subprocess.Popen(["python3", ASSISTANT_SCRIPT, host])
        state["assistant_process"] = proc
        threading.Thread(target=monitor_assistant, daemon=True).start()
    except Exception as e:
        print("‚ö† assistant.py „ÅÆËµ∑Âãï„Å´Â§±Êïó:", e)
        traceback.print_exc()
        handle_shutdown()


def stop_assistant():
    proc = state.get("assistant_process")
    if proc and proc.poll() is None:
        print("assistant.py „ÇíÁµÇ‰∫Ü„Åï„Åõ„Åæ„Åô...")
        proc.terminate()
        try:
            proc.wait(timeout=5)
            print("‚úÖ assistant.py ÁµÇ‰∫ÜÊàêÂäü")
        except subprocess.TimeoutExpired:
            print("‚ö† assistant.py ÂøúÁ≠î„Å™„Åó ‚Üí Âº∑Âà∂ÁµÇ‰∫Ü")
            proc.kill()
    state["assistant_process"] = None

def stop_pi():
    print("üõë Raspberry Pi „Çí„Ç∑„É£„ÉÉ„Éà„ÉÄ„Ç¶„É≥„Åó„Åæ„Åô...")
    
    # GPIO„ÇíÊòéÁ§∫ÁöÑ„Å´Ëß£Êîæ
    #cleanup_gpio()
    
    # „ÉÜ„Çπ„ÉàÁî®ÔºöÊú¨Áï™ÈÅãÁî®ÊôÇ„Å´„Ç≥„É°„É≥„Éà„Ç¢„Ç¶„ÉàËß£Èô§
    #os.system("sudo shutdown -h now")
# „Ç∞„É≠„Éº„Éê„É´Â§âÊï∞„Å®„Åó„Å¶ÂÆöÁæ©Ôºà„Éï„Ç°„Ç§„É´„ÅÆÂÜíÈ†≠„ÇÑ handle_shutdown() „ÅÆÂ§ñÔºâ


shutdown_initiated = False

def handle_shutdown():
    global shutdown_initiated
    if shutdown_initiated:
        print("‚ö†Ô∏è „Ç∑„É£„ÉÉ„Éà„ÉÄ„Ç¶„É≥Âá¶ÁêÜ„ÅØ„Åô„Åß„Å´ÂÆüË°å„Åï„Çå„Å¶„ÅÑ„Åæ„Åô„ÄÇ„Çπ„Ç≠„ÉÉ„Éó„Åó„Åæ„Åô„ÄÇ")
        return
    shutdown_initiated = True
    print("‚ö´ „Ç∑„É£„ÉÉ„Éà„ÉÄ„Ç¶„É≥Âá¶ÁêÜ‰∏≠...")
    state["mode"] = Mode.SHUTTING_DOWN
    stop_assistant()
    if state["host"]:
        # stop_voicevox(state["host"])  # ‚Üê ÂâäÈô§Ê∏à„Åø„ÅßOK
        stop_ec2()
        state["host"] = None
    try:
        led.off()
    except Exception as e:
        print(f"‚ö†Ô∏è LED.off() „Åß„Ç®„É©„Éº: {e}")
    state["mode"] = Mode.IDLE
    print("‚úÖ „Ç∑„É£„ÉÉ„Éà„ÉÄ„Ç¶„É≥ÂÆå‰∫Ü„ÄÇRaspberry Pi „Çí„Ç∑„É£„ÉÉ„Éà„ÉÄ„Ç¶„É≥„Åó„Åæ„Åô„ÄÇ")

    cleanup_gpio()
    
    # === Êú¨Áï™ÊôÇ„Å´‰ª•‰∏ã„ÇíÊúâÂäπÂåñÁÑ°Âäπ„ÅãÂá¶ÁêÜ„Çí„Åô„Çã ===
    
    # stop_pi()  # Êú¨Áï™ÊôÇ„Å´ÊúâÂäπÂåñ
    sys.exit(0)  # „ÉÜ„Çπ„ÉàÁî®(Êú¨Áï™„ÅØ„Ç≥„É°„É≥„Éà„Ç¢„Ç¶„Éà„ÄÇRaspberry Pi „Çí„Ç∑„É£„ÉÉ„Éà„ÉÄ„Ç¶„É≥„Åõ„Åö„Å´„ÄÅ„Çπ„ÇØ„É™„Éó„Éà„Å†„ÅëÁµÇ‰∫Ü„Åï„Åõ„Çã„Åü„ÇÅ)

def play_button_prompt():
    print("üîà„Äé„Éú„Çø„É≥„ÇíÊäº„Åó„Å¶„Å≠„Äè„ÅÆÈü≥Â£∞„ÇíÂÜçÁîü„Åó„Åæ„Åô...")
    try:
        subprocess.run(["aplay", "/home/pi/audio/button_instructions.wav"], check=True)
        print("‚úÖ Èü≥Â£∞ÂÜçÁîüÂÆå‰∫Ü")
    except Exception as e:
        print("‚ö† Èü≥Â£∞ÂÜçÁîü„Ç®„É©„Éº:", e)


def on_button_pressed():
    mode = state["mode"]
    print(f"üîò „Éú„Çø„É≥„ÅåÊäº„Åï„Çå„Åæ„Åó„ÅüÔºàÁèæÂú®„ÅÆ„É¢„Éº„Éâ: {mode}Ôºâ")

    if mode == Mode.IDLE:
        state["mode"] = Mode.STARTING
        host = start_ec2()
        if host and wait_for_voicevox(host):  # ‚≠ê start_voicevox()„ÅØÂëº„Å∞„Å™„ÅÑ
            state["host"] = host
            state["mode"] = Mode.TALKING
            start_assistant(host)
        else:
            print("‚ö† ÂàùÊúüÂåñÂ§±Êïó„ÄÇIDLE„Å´Êàª„Çä„Åæ„Åô„ÄÇ")
            state["mode"] = Mode.IDLE
            led.off()
    elif mode == Mode.TALKING:
        handle_shutdown()
    else:
        print("‚ö† Âá¶ÁêÜ‰∏≠„Åß„Åô„ÄÇ„Éú„Çø„É≥Êìç‰Ωú„ÅØÁÑ°Âäπ„Åß„Åô„ÄÇ")

try:
    play_button_prompt()  # ‚Üê „Åì„Åì„ÅßÈü≥Â£∞Ê°àÂÜÖ
    button.when_pressed = on_button_pressed
    print("‚ú® „Éú„Çø„É≥Êìç‰Ωú„ÇíÂæÖ„Å£„Å¶„ÅÑ„Åæ„Åô...")
    while True:
        time.sleep(config.SPEAKER_ID)
except KeyboardInterrupt:
    print("üßπ Ctrl+C „Å´„Çà„ÇãÁµÇ‰∫ÜÊ§úÁü•")
except Exception as e:
    print("‚ùå Ëá¥ÂëΩÁöÑ„Å™„Ç®„É©„ÉºÁô∫Áîü:", e)
    traceback.print_exc()
    handle_shutdown()
finally:
    cleanup_gpio()